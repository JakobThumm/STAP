ARG MODE=root

# We use the if else method as described here: https://stackoverflow.com/a/60820156/13397059
FROM osrf/ros:noetic-desktop-full as base
ARG DEBIAN_FRONTEND=noninteractive

SHELL ["/bin/bash", "--login", "-c"]

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

RUN apt-get update --fix-missing && \
    apt-get install --no-install-recommends -y \
        tzdata \
        dirmngr \
        gnupg2 \
        psmisc \
        python3 \
        python3-pip \
        python-is-python3 \
        mpich \
        python3-tk \
        python3-dev \
        libosmesa6-dev \
        libgl1-mesa-glx \
        libglfw3 \
        apt-utils dialog 2>&1 \
        git \
        iproute2 \
        procps \
        lsb-release \
        nano \
        libopenmpi-dev \
        swig \
        wget \
        ca-certificates \
        curl \
        git \
        bzip2 \
        sudo \
        cmake \
        build-essential \
        tar \
        unzip \
        curl \
        g++ \
        gcc-9 \
        clang \
        libgtest-dev \
        libgmock-dev \
        bc \
        tmux \
        python3-catkin-tools \
        iputils-ping \
        net-tools \
        netcat \
        tcpdump

RUN apt-get upgrade libstdc++6 -y
RUN apt-get dist-upgrade

RUN apt-get autoremove -y && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/*

ENV DEBIAN_FRONTEND=dialog

# Install python dependencies
COPY requirements.txt .
RUN pip install --upgrade pip && \
    pip install --default-timeout=1000 -r requirements.txt

# Pull and install eigen
RUN curl -LJO https://gitlab.com/libeigen/eigen/-/archive/3.4.0/eigen-3.4.0.tar.bz2 && \
    tar -xvf eigen-3.4.0.tar.bz2 && \
    rm eigen-3.4.0.tar.bz2

WORKDIR /eigen-3.4.0/build
RUN cmake .. && make install

#-------------------------------------------------------------------------------------------------------------
# User docker
#-------------------------------------------------------------------------------------------------------------
FROM base as branch-user

ARG USERNAME=robot
ARG USER_UID=1000
ARG USER_GID=$USER_UID
RUN groupadd --gid $USER_GID $USERNAME && \
    useradd --create-home --no-log-init --uid $USER_UID --gid $USER_GID $USERNAME

# ARG is scoped -> has to be set as environment variable
ENV HOME_PATH=/home/$USERNAME
USER $USERNAME

#-------------------------------------------------------------------------------------------------------------
# Root docker
#-------------------------------------------------------------------------------------------------------------
FROM base as branch-root

ARG USERNAME=root
ENV HOME_PATH=/root

#-------------------------------------------------------------------------------------------------------------
# Final docker
#-------------------------------------------------------------------------------------------------------------
FROM branch-${MODE} AS final

WORKDIR $HOME_PATH

RUN mkdir -p catkin_ws/src/stap-ros-pkg
ENV CATKIN_WS_PATH=/home/$USERNAME/catkin_ws
ENV STAP_PKG_PATH=/home/$USERNAME/catkin_ws/src/stap-ros-pkg

ARG USERNAME=root

WORKDIR $STAP_PKG_PATH

# Copy all required folders
COPY --chown=$USERNAME Pipfile pyproject.toml setup.cfg generate_primitive_dataset.py $STAP_PKG_PATH/
# COPY --chown=$USERNAME configs/ $STAP_PKG_PATH/configs/
# COPY --chown=$USERNAME scripts/ $STAP_PKG_PATH/scripts/
# COPY --chown=$USERNAME stap/ $STAP_PKG_PATH/stap/
COPY --chown=$USERNAME third_party/ $STAP_PKG_PATH/third_party/
# Copy the ROS files.
# COPY --chown=$USERNAME launch/ $STAP_PKG_PATH/launch/
# COPY --chown=$USERNAME CMakeLists.txt package.xml setup.py $STAP_PKG_PATH/

ENV STAP_PATH=$STAP_PKG_PATH
# Install python packages with root privileges
USER root
# Build SaRA shield
ENV CONDA_PREFIX="/usr/"
WORKDIR $STAP_PKG_PATH/third_party/sara-shield
RUN rm -rf build && \
    rm -rf safety_shield/build
RUN export EIGEN3_INCLUDE_DIR="/eigen-3.4.0" && \
    python setup.py install

# Should be called after installing STAP?
WORKDIR $STAP_PKG_PATH/third_party/scod-regression
RUN rm -rf scod-regression.egg-info && \
    rm -rf build
RUN pip install .

# Install ROS packages
WORKDIR $CATKIN_WS_PATH

# RUN catkin init
# RUN catkin build

RUN chown -R $USERNAME $CATKIN_WS_PATH
# Switch back to USER mode
USER $USERNAME

# Ros catkin screws up numpy version
RUN pip install numpy==1.24.4

# RUN source devel/setup.bash

COPY --chown=$USERNAME .bashrc_ros $HOME_PATH/.bashrc
COPY --chown=$USERNAME .tmux.conf $HOME_PATH/.tmux.conf

RUN echo "export SARA_SHIELD_CONFIG_PATH=${STAP_PKG_PATH}/third_party/sara-shield/safety_shield/config" >> $HOME_PATH/.bashrc
RUN echo "source /opt/ros/noetic/setup.bash" >> $HOME_PATH/.bashrc
RUN echo "source $CATKIN_WS_PATH/devel/setup.bash" >> $HOME_PATH/.bashrc
RUN echo "export ROS_MASTER_URI=http://10.42.0.69:11311" >> $HOME_PATH/.bashrc
RUN echo "export ROS_IP=10.42.0.1" >> $HOME_PATH/.bashrc
RUN echo "export ROS_HOSTNAME=10.42.0.1" >> $HOME_PATH/.bashrc
RUN echo 'echo "USAGE:"' >> $HOME_PATH/.bashrc
RUN echo 'echo "python scripts/debug/debug_pybullet.py -e configs/pybullet/envs/official/real_domains/debug/real_human_template_env.yaml"' >> $HOME_PATH/.bashrc

SHELL ["/bin/bash", "-c"]

ENTRYPOINT ["/bin/bash", "-c"]
CMD ["/bin/bash"]
